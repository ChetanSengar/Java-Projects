/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sign_ip;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.event.TextEvent;
import java.io.*;
import java.util.Scanner;
import javax.swing.*;
/**
 *
 * @author hp 1
 */
public class Chetan_notepad extends javax.swing.JFrame {
    String programName = "Notepad";
    String fileName = "";
    String holdText;
    String fn; 
    String dir;
    boolean textChanged = false;
    String FileName;
    Clipboard clip = getToolkit().getSystemClipboard();
    /**
     * Creates new form Chetan_notepad
     */
    public Chetan_notepad() {
         setTitle("Untitled_Desktop");
        initComponents();
    }
        public void checkFile(){
        BufferedReader read;
        StringBuffer sb = new StringBuffer();
        try{
            read = new BufferedReader(new FileReader(fileName));
            String line;
            while((line = read.readLine()) != null){
                sb.append(line + "\n");
            }
            textArea.setText(sb.toString());
            read.close();
        }catch(FileNotFoundException e){
            System.out.println("File Not Found.");
        } catch(IOException ioe){
            
        }
                
        
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorDialog = new javax.swing.JDialog();
        colorChooser = new javax.swing.JColorChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        newmenu = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenuItem();
        openMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        saveasMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        developerMenu = new javax.swing.JMenuItem();
        colormenu = new javax.swing.JMenuItem();

        jFileChooser2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorDialogLayout = new javax.swing.GroupLayout(colorDialog.getContentPane());
        colorDialog.getContentPane().setLayout(colorDialogLayout);
        colorDialogLayout.setHorizontalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDialogLayout.createSequentialGroup()
                .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 64, Short.MAX_VALUE))
            .addGroup(colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(colorDialogLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jFileChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        colorDialogLayout.setVerticalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDialogLayout.createSequentialGroup()
                .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 62, Short.MAX_VALUE))
            .addGroup(colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(colorDialogLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jFileChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 255, 255));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(textArea);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/giphy (1).gif"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/kr1.gif"))); // NOI18N

        newmenu.setText("File");
        newmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newmenuActionPerformed(evt);
            }
        });

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenu.setText("New");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        newmenu.add(newMenu);

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        newmenu.add(openMenu);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        newmenu.add(saveMenu);

        saveasMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveasMenu.setText("Save as");
        saveasMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveasMenuActionPerformed(evt);
            }
        });
        newmenu.add(saveasMenu);

        exitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        newmenu.add(exitMenu);

        jMenuBar1.add(newmenu);

        jMenu2.setText("View");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        developerMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        developerMenu.setText("Back");
        developerMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                developerMenuActionPerformed(evt);
            }
        });
        jMenu2.add(developerMenu);

        colormenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        colormenu.setText("Change Color");
        colormenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colormenuActionPerformed(evt);
            }
        });
        jMenu2.add(colormenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1031, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 371, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuActionPerformed
        newFile();// TODO add your handling code here:
    }//GEN-LAST:event_newMenuActionPerformed

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        FileDialog fd = new FileDialog(new JFrame(), "Select File",FileDialog.LOAD);
     fd.setMultipleMode(true);
     fd.show();
     if (fd.getFiles()!=null)
     {
        File[] files=fd.getFiles();
        for(File item : files)
        {
           String  filename = item.toString();
           String file=filename;
           if(filename.contains("\\")){
               file = filename.substring(filename.lastIndexOf("\\") + 1);
           }
           else if(filename.contains("/")){
               file = filename.substring(filename.lastIndexOf("/") + 1);
           } 
           setTitle("Tabbed Notepad in Java - [ "+file+" ]");
           BufferedReader d;
           StringBuffer sb = new StringBuffer();
           try
            {
              d = new BufferedReader(new FileReader(filename));
              String line;
              while((line=d.readLine())!=null)
                       sb.append(line + "\n");
                       textArea.setText(sb.toString());
              d.close();
            }
           catch(FileNotFoundException fe)
            {
               System.out.println("File not Found");
            }
             catch(IOException ioe){}

              textArea.requestFocus();

           }
       }
    }//GEN-LAST:event_openMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        if(fileName.equals(""))
                saveAs();
        else
                save(fileName);// TODO add your handling code here:
    }//GEN-LAST:event_saveMenuActionPerformed

    private void saveasMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveasMenuActionPerformed
        saveAs();// TODO add your handling code here:
    }//GEN-LAST:event_saveasMenuActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        if("".equals(textArea.getText())){
            System.exit(0);
        }
        else
        {
            int confirm = JOptionPane.showConfirmDialog(this, "Confirm Exit ?", "Warning", JOptionPane.YES_NO_OPTION);
            if(confirm==JOptionPane.YES_OPTION){
                if(fileName.equals(""))
                    saveAs();
                else
                    save(fileName);
            }
            if(confirm == JOptionPane.NO_OPTION)
            {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_exitMenuActionPerformed

    private void textAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textAreaKeyTyped

    private void newmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newmenuActionPerformed
        if(TextEvent.TEXT_VALUE_CHANGED!=0){
        setTitle("* "+getTitle());
        }
        textChanged = true;
        saveMenu.setEnabled(true);
    }//GEN-LAST:event_newmenuActionPerformed

    private void colormenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colormenuActionPerformed
        
        //Color c= colorChooser.showDialog(null,"Color Dialog : Choose Color",sampleText.getForeground());
        //if(c!=null)
          //  textArea.setForeground(c);
        //sampleText.setBackground(null);
       // TODO add your handling code here:
    }//GEN-LAST:event_colormenuActionPerformed

    private void developerMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_developerMenuActionPerformed
        setVisible(false); dispose();// TODO add your handling code here:
    }//GEN-LAST:event_developerMenuActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jFileChooser2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser2ActionPerformed
        FileDialog fd = new FileDialog(new JFrame(), "Select File",FileDialog.LOAD);
     fd.setMultipleMode(true);
     fd.show();
     if (fd.getFiles()!=null)
     {
        File[] files=fd.getFiles();
        for(File item : files)
        {
           String  filename = item.toString();
           String file=filename;
           if(filename.contains("\\")){
               file = filename.substring(filename.lastIndexOf("\\") + 1);
           }
           else if(filename.contains("/")){
               file = filename.substring(filename.lastIndexOf("/") + 1);
           } 
           setTitle("Tabbed Notepad in Java - [ "+file+" ]");
           BufferedReader d;
           StringBuffer sb = new StringBuffer();
           try
            {
              d = new BufferedReader(new FileReader(filename));
              String line;
              while((line=d.readLine())!=null)
                       sb.append(line + "\n");
                       textArea.setText(sb.toString());
              d.close();
            }
           catch(FileNotFoundException fe)
            {
               System.out.println("File not Found");
            }
             catch(IOException ioe){}

              textArea.requestFocus();

           }
       }// TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser2ActionPerformed
    private void textAreaTextValueChanged(java.awt.event.TextEvent ete){
        if(TextEvent.TEXT_VALUE_CHANGED!=0){
        setTitle("* "+getTitle());
        }
        textChanged = true;
        saveMenu.setEnabled(true);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chetan_notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chetan_notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chetan_notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chetan_notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chetan_notepad().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser colorChooser;
    private javax.swing.JDialog colorDialog;
    private javax.swing.JMenuItem colormenu;
    private javax.swing.JMenuItem developerMenu;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JMenu newmenu;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JMenuItem saveasMenu;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

    private void saveAs() {
     FileDialog fd = new FileDialog(Chetan_notepad.this, "Save", FileDialog.SAVE);
     fd.show();
     if(fd.getFile() != null){
         fn = fd.getFile();
         dir=fd.getDirectory();
         fileName = dir + fn + ".txt";
         
         setTitle(fileName);
         try{
             DataOutputStream d = new DataOutputStream(new FileOutputStream(fileName));
             holdText = textArea.getText();
             BufferedReader br = new BufferedReader(new StringReader(holdText));
             while((holdText = br.readLine()) != null)
             {
                 d.writeBytes(holdText + "\r\n");
                 d.close();
             }
         }catch(Exception e){
             System.out.print("File Not Found.");
         }
         textArea.requestFocus();
         save(fileName);
     }
    }

    private void save(String fileName) {
        setTitle(programName+"_chunnu_ "+fileName);
        try{
            FileWriter out;
            out = new FileWriter(fn);
            out.write(textArea.getText());
            out.close();
        }catch(Exception err){
            System.out.print("Error: "+ err);
        }
        textChanged = false;
        saveMenu.setEnabled(false);
    }

    private void newFile() {
        if(textArea.getText().length() < 1){
        setTitle("Untitled - "+programName);
        textArea.setText("");
        textChanged = false;
        }
        else if(!textChanged){
            /*setTitle("Untitled - "+programName);
            textArea.setText("");
            textChanged = false;
        }
        else{*/
            int confirm = JOptionPane.showConfirmDialog(null, "Would you like to save your Text ?", "Warning", JOptionPane.YES_NO_OPTION);
            if(confirm == JOptionPane.YES_OPTION){
               if("".equals(fileName)){
                    saveAs();
                }
                else{
                    save(fileName);
                }
                setTitle(programName);
                fileName="";
                textArea.setText("");
                textChanged = false;
            }
            else if(confirm == JOptionPane.NO_OPTION){
                setTitle(programName);
                textArea.setText("");
                textChanged = false;
            }
        }
    }
}
